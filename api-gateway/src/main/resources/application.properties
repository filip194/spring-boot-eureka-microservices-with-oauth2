server.port=9092

# Register api gateway as a Eureka client
eureka.client.serviceUrl.defaultZone=http://localhost:9010/eureka

# Specify unique Eureka instance ID
eureka.instance.instance-id=${spring.application.name}:${instanceId:${random.value}}

# Smart Homes Resource Server
spring.cloud.gateway.routes[0].id=smart-homes-get-port
spring.cloud.gateway.routes[0].uri=lb://smart-homes-resource-server
# Predicates: list; these are Java 8 Predicates that need to be matched
spring.cloud.gateway.routes[0].predicates[0]=Path=/smart-homes/port
spring.cloud.gateway.routes[0].predicates[1]=Method=GET
# Filters: list
spring.cloud.gateway.filters[0]=RemoveRequestHeader=Cookie

spring.cloud.gateway.routes[1].id=smart-homes-get-all
spring.cloud.gateway.routes[1].uri=lb://smart-homes-resource-server
spring.cloud.gateway.routes[1].predicates[0]=Path=/smart-homes/all
spring.cloud.gateway.routes[1].predicates[1]=Method=GET
spring.cloud.gateway.filters[1]=RemoveRequestHeader=Cookie

# Wearables Resource Server
spring.cloud.gateway.routes[2].id=wearables-get-port
spring.cloud.gateway.routes[2].uri=lb://wearables-resource-server
spring.cloud.gateway.routes[2].predicates[0]=Path=/wearables/port
spring.cloud.gateway.routes[2].predicates[1]=Method=GET
spring.cloud.gateway.filters[2]=RemoveRequestHeader=Cookie

spring.cloud.gateway.routes[3].id=wearables-get-all
spring.cloud.gateway.routes[3].uri=lb://wearables-resource-server
spring.cloud.gateway.routes[3].predicates[0]=Path=/wearables/all
spring.cloud.gateway.routes[3].predicates[1]=Method=GET
spring.cloud.gateway.filters[3]=RemoveRequestHeader=Cookie

# Cars Resource Server
spring.cloud.gateway.routes[4].id=cars-get-port
spring.cloud.gateway.routes[4].uri=lb://cars-resource-server
spring.cloud.gateway.routes[4].predicates[0]=Path=/cars/port
spring.cloud.gateway.routes[4].predicates[1]=Method=GET
spring.cloud.gateway.filters[4]=RemoveRequestHeader=Cookie

spring.cloud.gateway.routes[5].id=cars-get-all
spring.cloud.gateway.routes[5].uri=lb://cars-resource-server
spring.cloud.gateway.routes[5].predicates[0]=Path=/cars/all
spring.cloud.gateway.routes[5].predicates[1]=Method=GET
spring.cloud.gateway.filters[5]=RemoveRequestHeader=Cookie

spring.cloud.gateway.routes[6].id=cars-get-single
spring.cloud.gateway.routes[6].uri=lb://cars-resource-server
spring.cloud.gateway.routes[6].predicates[0]=Path=/cars/{id}
spring.cloud.gateway.routes[6].predicates[1]=Method=GET
spring.cloud.gateway.filters[6]=RemoveRequestHeader=Cookie

spring.cloud.gateway.routes[7].id=cars-delete-single
spring.cloud.gateway.routes[7].uri=lb://cars-resource-server
spring.cloud.gateway.routes[7].predicates[0]=Path=/cars/{id}
spring.cloud.gateway.routes[7].predicates[1]=Method=DELETE
spring.cloud.gateway.filters[7]=RemoveRequestHeader=Cookie

spring.cloud.gateway.routes[8].id=cars-get-token
spring.cloud.gateway.routes[8].uri=lb://cars-resource-server
spring.cloud.gateway.routes[8].predicates[0]=Path=/token
spring.cloud.gateway.routes[8].predicates[1]=Method=GET
spring.cloud.gateway.filters[8]=RemoveRequestHeader=Cookie

# To provide the same CORS configuration to requests that are not handled by some gateway route predicate,
# set this property to true. This is useful when you try to support CORS preflight requests and
# your route predicate does not evaluate to true because the HTTP method is options.
spring.cloud.gateway.globalcors.add-to-simple-url-handler-mapping=true